{"version":3,"sources":["constants/saveData.js","routes/paths.js","reducers/saveData.js","contexts/SaveData.jsx","assets/bg.webp","theme/index.jsx","components/ContainerBG/style.js","components/ContainerBG/index.jsx","routes/index.jsx","app/index.jsx","serviceWorker.js","index.jsx"],"names":["SAVE_DATA__ADD","SAVE_DATA__TO_DEFAULT_STATE","SAVE_DATA__DEFAULT_STATE","file","File","haveFile","SELECT_SAVE_DATA","EDIT_SAVE_DATA","state","action","type","payload","SaveDataContext","createContext","SaveDataProvider","children","contextValue","useReducer","reducer","Provider","value","useSaveData","useContext","module","exports","theme","createMuiTheme","typography","fontFamily","overrides","MuiCssBaseline","Theme","ThemeProvider","CssBaseline","makeStyles","container","minHeight","backgroundSize","backgroundRepeat","memo","classes","useStyles","className","style","backgroundImage","bg","SelectSaveData","lazy","EditSaveData","Routes","fallback","SaveData","exact","path","PATHS","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAA,sGAAO,IAAMA,EAAiB,iBACjBC,EAA8B,8BAC9BC,EAA2B,CACtCC,KAAM,IAAIC,KAAK,CAAC,IAAK,IACrBC,UAAU,I,gCCDG,KACbC,iBAJuB,IAKvBC,eAJqB,U,wICKR,WAACC,EAAOC,GAAY,IACzBC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QACd,OAAQD,GACN,KAAKV,IAAgB,OAAO,2BAAKQ,GAAUG,GAC3C,KAAKV,IAA6B,OAAOC,IACzC,QAAS,OAAOM,ICLdI,EAAkBC,0BAEXC,EAAmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3BC,EAAeC,qBAAWC,EAAShB,KACzC,OACE,kBAACU,EAAgBO,SAAjB,CAA0BC,MAAOJ,GAC9BD,IAaMM,EAAc,WAEzB,OADqBC,qBAAWV,K,mBC1BlCW,EAAOC,QAAU,IAA0B,iC,qKCMrCC,EAAQC,YAAe,CAC3BC,WAAY,CACVC,WAAY,6BAEdC,UAAW,CACTC,eAAgB,CACd,UAAW,CACTF,WAAY,iCAqBLG,EAfD,SAAC,GAAD,IAAGhB,EAAH,EAAGA,SAAH,OACZ,kBAACiB,EAAA,EAAD,CAAeP,MAAOA,GACpB,kBAACQ,EAAA,EAAD,MACElB,I,wCCpBSmB,eAAW,iBAAO,CAC/BC,UAAW,CACTC,UAAW,QACXC,eAAgB,QAChBC,iBAAkB,iBCwBPC,kBAvBK,SAAC,GAAkB,IAAhBxB,EAAe,EAAfA,SACfyB,EAAUC,IAEhB,OACE,yBACEC,UAAWF,EAAQL,UACnBQ,MAAO,CACLC,gBAAgB,OAAD,OAASC,IAAT,OAGf9B,M,gBCTF+B,EAAiBC,gBAAK,kBAAM,uDAC5BC,EAAeD,gBAAK,kBAAM,uDAkBjBE,EAhBA,kBACb,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,6CAClB,kBAAC,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAMC,IAAMhD,iBAAkBiD,UAAWT,IACtD,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAMC,IAAM/C,eAAgBgD,UAAWP,IACpD,kBAAC,IAAD,CAAOO,UAAW,kBAAM,8CCRrBC,EANH,kBACV,kBAAC,EAAD,KACE,kBAAC,EAAD,QCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3b845bd8.chunk.js","sourcesContent":["export const SAVE_DATA__ADD = 'SAVE_DATA__ADD';\nexport const SAVE_DATA__TO_DEFAULT_STATE = 'SAVE_DATA__TO_DEFAULT_STATE';\nexport const SAVE_DATA__DEFAULT_STATE = {\n  file: new File([''], ''),\n  haveFile: false,\n};\n","const SELECT_SAVE_DATA = '/';\nconst EDIT_SAVE_DATA = '/edit';\n\nexport default {\n  SELECT_SAVE_DATA,\n  EDIT_SAVE_DATA,\n};\n","import {\n  SAVE_DATA__ADD,\n  SAVE_DATA__TO_DEFAULT_STATE,\n  SAVE_DATA__DEFAULT_STATE,\n} from '../constants/saveData';\n\nexport default (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case SAVE_DATA__ADD: return { ...state, ...payload };\n    case SAVE_DATA__TO_DEFAULT_STATE: return SAVE_DATA__DEFAULT_STATE;\n    default: return state;\n  }\n};\n","import React, { createContext, useContext, useReducer } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { SAVE_DATA__DEFAULT_STATE } from '../constants/saveData';\nimport reducer from '../reducers/saveData';\n\nconst SaveDataContext = createContext();\n\nexport const SaveDataProvider = ({ children }) => {\n  const contextValue = useReducer(reducer, SAVE_DATA__DEFAULT_STATE);\n  return (\n    <SaveDataContext.Provider value={contextValue}>\n      {children}\n    </SaveDataContext.Provider>\n  );\n};\n\nSaveDataProvider.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n    PropTypes.string,\n  ]).isRequired,\n};\n\nexport const useSaveData = () => {\n  const contextValue = useContext(SaveDataContext);\n  return contextValue;\n};\n","module.exports = __webpack_public_path__ + \"static/media/bg.437e9f4c.webp\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: \"'Press Start 2P', cursive\",\n  },\n  overrides: {\n    MuiCssBaseline: {\n      '@global': {\n        fontFamily: \"'Press Start 2P', cursive\",\n      },\n    },\n  },\n});\n\nconst Theme = ({ children }) => (\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    { children }\n  </ThemeProvider>\n);\n\nTheme.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n    PropTypes.string,\n  ]).isRequired,\n};\n\nexport default Theme;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles(() => ({\n  container: {\n    minHeight: '100vh',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n  },\n}));\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport bg from '../../assets/bg.webp';\n\nimport useStyles from './style';\n\nconst ContainerBG = ({ children }) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={classes.container}\n      style={{\n        backgroundImage: `url(${bg})`,\n      }}\n    >\n      { children }\n    </div>\n  );\n};\n\nContainerBG.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n    PropTypes.string,\n  ]).isRequired,\n};\n\nexport default memo(ContainerBG);\n","import React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport ContainerBG from '../components/ContainerBG';\nimport { SaveDataProvider } from '../contexts/SaveData';\n\nimport PATHS from './paths';\n\nconst SelectSaveData = lazy(() => import('../containers/SelectSaveData'));\nconst EditSaveData = lazy(() => import('../containers/EditSaveData'));\n\nconst Routes = () => (\n  <Router>\n    <Suspense fallback={<div>Loading... </div>}>\n      <ContainerBG>\n        <SaveDataProvider>\n          <Switch>\n            <Route exact path={PATHS.SELECT_SAVE_DATA} component={SelectSaveData} />\n            <Route exact path={PATHS.EDIT_SAVE_DATA} component={EditSaveData} />\n            <Route component={() => <h1> 404 </h1>} />\n          </Switch>\n        </SaveDataProvider>\n      </ContainerBG>\n    </Suspense>\n  </Router>\n);\n\nexport default Routes;\n","import React from 'react';\n\nimport Theme from '../theme';\nimport Routes from '../routes';\n\nconst App = () => (\n  <Theme>\n    <Routes />\n  </Theme>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './app';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}